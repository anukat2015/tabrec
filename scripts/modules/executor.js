// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  this.Executor = (function() {
    var clear_arrays, get_domain, handle_multi_activate_pattern, revert_multi_activate_pattern, sort_by_domains, sort_tabs_by_domains, _current_ma_version, _dbg_mode, _tabs, _tabs_backup;

    _dbg_mode = null;

    _tabs = [];

    _tabs_backup = [];

    _current_ma_version = Constants.get_current_activate_pattern_version();

    function Executor() {
      _dbg_mode = Constants.is_debug_mode();
    }

    Executor.prototype.execute = function(pattern) {
      if (_dbg_mode) {
        console.log("Executing action for: " + pattern);
      }
      if (pattern === ("MULTI_ACTIVATE_" + _current_ma_version)) {
        return handle_multi_activate_pattern();
      }
    };

    Executor.prototype.revert = function(pattern) {
      if (_dbg_mode) {
        console.log("Reverting action for: " + pattern);
      }
      if (pattern === ("MULTI_ACTIVATE_" + _current_ma_version)) {
        return revert_multi_activate_pattern();
      }
    };

    handle_multi_activate_pattern = function() {
      clear_arrays();
      return chrome.tabs.query({
        windowId: chrome.windows.WINDOW_ID_CURRENT
      }, sort_tabs_by_domains);
    };

    revert_multi_activate_pattern = function() {
      var ids;
      ids = _tabs_backup.map(function(tab) {
        return tab.id;
      });
      return chrome.tabs.move(ids, {
        index: 0
      });
    };

    sort_tabs_by_domains = function(tabs) {
      var ids, tab, url, _i, _len, _tabs_ordered;
      _tabs_ordered = [];
      for (_i = 0, _len = tabs.length; _i < _len; _i++) {
        tab = tabs[_i];
        url = new URL(tab.url);
        _tabs.push({
          id: tab.id,
          domain: get_domain(url.hostname),
          subdomain: url.hostname
        });
        _tabs_backup.push({
          id: tab.id
        });
      }
      _tabs_ordered = sort_by_domains(_tabs);
      ids = _tabs_ordered.map(function(tab) {
        return tab.id;
      });
      return chrome.tabs.move(ids, {
        index: 0
      });
    };

    sort_by_domains = function(tabs) {
      return tabs.sort(function(a, b) {
        if (a.domain === b.domain) {
          return a.subdomain.localeCompare(b.subdomain);
        } else {
          return a.domain.localeCompare(b.domain);
        }
      });
    };

    clear_arrays = function() {
      _tabs = [];
      return _tabs_backup = [];
    };

    get_domain = function(subdomain) {
      var array, top_level_domain;
      array = subdomain.split('.');
      top_level_domain = array.pop();
      return "" + (array.pop()) + "." + top_level_domain;
    };

    return Executor;

  })();

}).call(this);
