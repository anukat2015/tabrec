// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  this.MultiActivate = (function() {
    var DIFF_ELEM_COUNT, NAME, SEQUENCE, contains_different_elements, not_next_to, _current_ma_version, _dbg_mode, _last_activated_tab_position, _recorded;

    SEQUENCE = null;

    NAME = null;

    DIFF_ELEM_COUNT = 3;

    _dbg_mode = null;

    _current_ma_version = null;

    _last_activated_tab_position = null;

    _recorded = [];

    function MultiActivate() {
      _dbg_mode = Constants.is_debug_mode();
      _current_ma_version = Constants.get_current_activate_pattern_version();
      SEQUENCE = ['TAB_ACTIVATED', 'TAB_ACTIVATED', 'TAB_ACTIVATED', 'TAB_ACTIVATED'];
      NAME = "MULTI_ACTIVATE_" + _current_ma_version;
    }

    MultiActivate.prototype.sequence = function() {
      return SEQUENCE;
    };

    MultiActivate.prototype.name = function() {
      return NAME;
    };

    MultiActivate.prototype.should_record_activate = function(tab_position, tab_id) {
      if (_last_activated_tab_position === null || not_next_to(tab_position, _last_activated_tab_position)) {
        _last_activated_tab_position = tab_position;
        _recorded.push(tab_id);
        return true;
      } else {
        _last_activated_tab_position = tab_position;
        return false;
      }
    };

    MultiActivate.prototype.all_conditions_satisfied = function() {
      return contains_different_elements(_recorded, DIFF_ELEM_COUNT);
    };

    MultiActivate.prototype.reset_states = function() {
      return _recorded = [];
    };

    not_next_to = function(pos1, pos2) {
      return Math.abs(pos1 - pos2) !== 1;
    };

    contains_different_elements = function(array, number) {
      var elem, tmp, _i, _len;
      tmp = [];
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        elem = array[_i];
        if (tmp.indexOf(elem) === -1) {
          tmp.push(elem);
        }
      }
      if (_dbg_mode) {
        console.log("Array contains " + tmp.length + " different elements");
      }
      if (tmp.length >= number) {
        return true;
      } else {
        return false;
      }
    };

    return MultiActivate;

  })();

}).call(this);
