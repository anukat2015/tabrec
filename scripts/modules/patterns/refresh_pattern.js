// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  this.RefreshPattern = (function() {
    var CURRENT_VERSION, DBG_MODE, NAME, PATTERN_SEQUENCE, clear_arrays, same_tab_reloading, should_record_update, _current_sequence, _last_update_url, _recorded;

    PATTERN_SEQUENCE = null;

    NAME = null;

    DBG_MODE = null;

    CURRENT_VERSION = null;

    _recorded = [];

    _current_sequence = [];

    _last_update_url = "";

    function RefreshPattern() {
      DBG_MODE = Constants.is_debug_mode();
      CURRENT_VERSION = Constants.get_current_refresh_pattern_version();
      PATTERN_SEQUENCE = ['TAB_UPDATED', 'TAB_UPDATED', 'TAB_UPDATED'];
      NAME = "REFRESH_" + CURRENT_VERSION;
    }

    RefreshPattern.prototype.pattern_sequence = function() {
      return PATTERN_SEQUENCE.toString();
    };

    RefreshPattern.prototype.current_sequence = function() {
      return _current_sequence.toString();
    };

    RefreshPattern.prototype.name = function() {
      return NAME;
    };

    RefreshPattern.prototype.register_event = function(event_name, event_data) {
      if (event_name === 'TAB_UPDATED') {
        if (should_record_update(event_data)) {
          _current_sequence.push(event_name);
        }
        if (DBG_MODE) {
          return console.log("Refresh: current sequence: " + _current_sequence);
        }
      }
    };

    RefreshPattern.prototype.specific_conditions_satisfied = function() {
      return true;
    };

    RefreshPattern.prototype.reset_states = function() {
      if (DBG_MODE) {
        console.log("Refresh: resetting states");
      }
      return clear_arrays();
    };

    clear_arrays = function() {
      _recorded = [];
      return _current_sequence = [];
    };

    should_record_update = function(data) {
      var url;
      url = data.url;
      if (_recorded.length < 2 || same_tab_reloading(_recorded, url)) {
        _recorded.push(url);
        return true;
      } else {
        return false;
      }
    };

    same_tab_reloading = function(array, url) {
      var all_same, _i, _len, _url;
      all_same = true;
      for (_i = 0, _len = array.length; _i < _len; _i++) {
        _url = array[_i];
        if (_url !== url) {
          all_same = false;
        }
      }
      return all_same;
    };

    return RefreshPattern;

  })();

}).call(this);
