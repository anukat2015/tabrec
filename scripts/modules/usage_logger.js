// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  this.UsageLogger = (function() {
    var cache, cache_usage_log, get_current_ts, last_post_time, post_usage_logs, tab_activated, tab_attached, tab_created, tab_detached, tab_moved, tab_removed, tab_updated, _batch_size, _conn, _dbg, _uid;

    _conn = null;

    _dbg = false;

    _batch_size = 100;

    _uid = null;

    function UsageLogger(connection, batch_size, user_id, debug_mode) {
      this.connection = connection;
      this.batch_size = batch_size;
      this.user_id = user_id;
      this.debug_mode = debug_mode;
      _conn = this.connection;
      _dbg = this.debug_mode;
      _batch_size = this.batch_size;
      _uid = this.user_id;
    }

    UsageLogger.prototype.start = function() {
      if (_dbg) {
        console.log("Usage logger has started!");
      }
      chrome.tabs.onCreated.addListener(tab_created);
      chrome.tabs.onRemoved.addListener(tab_removed);
      chrome.tabs.onActivated.addListener(tab_activated);
      chrome.tabs.onMoved.addListener(tab_moved);
      chrome.tabs.onAttached.addListener(tab_attached);
      chrome.tabs.onDetached.addListener(tab_detached);
      return chrome.tabs.onUpdated.addListener(tab_updated);
    };

    cache = [];

    last_post_time = new Date().getTime();

    cache_usage_log = function(log) {
      if (_dbg) {
        console.log("Caching usage log: Tab id: " + log.tab_id + ", Event: " + log.event + ", Time: " + log.timestamp);
      }
      cache.push(log);
      if ((cache.length >= _batch_size) || (get_current_ts() - last_post_time > (3 * 60 * 1000))) {
        return post_usage_logs();
      }
    };

    post_usage_logs = function() {
      _conn.post_usage_logs(cache);
      cache.length = 0;
      return last_post_time = get_current_ts();
    };

    get_current_ts = function() {
      return new Date().getTime();
    };

    tab_created = function(tab) {
      return cache_usage_log({
        user_id: _uid,
        timestamp: get_current_ts(),
        event: 'TAB_CREATED',
        window_id: tab.windowId,
        tab_id: tab.id,
        url: tab.url
      });
    };

    tab_removed = function(tab_id, remove_info) {
      return cache_usage_log({
        user_id: _uid,
        timestamp: get_current_ts(),
        event: 'TAB_REMOVED',
        window_id: remove_info.windowId,
        tab_id: tab_id
      });
    };

    tab_activated = function(active_info) {
      return chrome.tabs.get(active_info.tabId, function(tab) {
        return cache_usage_log({
          user_id: _uid,
          timestamp: get_current_ts(),
          event: 'TAB_ACTIVATED',
          window_id: active_info.windowId,
          tab_id: active_info.tabId,
          url: tab.url
        });
      });
    };

    tab_moved = function(tab_id, move_info) {
      return cache_usage_log({
        user_id: _uid,
        timestamp: get_current_ts(),
        event: 'TAB_MOVED',
        window_id: move_info.windowId,
        tab_id: tab_id,
        index_from: move_info.fromIndex,
        index_to: move_info.toIndex
      });
    };

    tab_attached = function(tab_id, attach_info) {
      return cache_usage_log({
        user_id: _uid,
        timestamp: get_current_ts(),
        event: 'TAB_ATTACHED',
        window_id: attach_info.newWindowId,
        tab_id: tab_id,
        index_to: attach_info.newPosition
      });
    };

    tab_detached = function(tab_id, detach_info) {
      return cache_usage_log({
        user_id: _uid,
        timestamp: get_current_ts(),
        event: 'TAB_DETACHED',
        window_id: detach_info.oldWindowId,
        tab_id: tab_id,
        index_from: detach_info.oldPosition
      });
    };

    tab_updated = function(tab_id, change_info, tab) {
      if (change_info.status === 'complete') {
        return cache_usage_log({
          user_id: _uid,
          timestamp: get_current_ts(),
          event: 'TAB_UPDATED',
          url: tab.url,
          window_id: tab.windowId,
          tab_id: tab.id
        });
      }
    };

    return UsageLogger;

  })();

}).call(this);
